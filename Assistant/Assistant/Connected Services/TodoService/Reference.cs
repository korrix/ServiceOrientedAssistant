//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assistant.TodoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Todo", Namespace="http://schemas.datacontract.org/2004/07/TodoService")]
    [System.SerializableAttribute()]
    public partial class Todo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Done {
            get {
                return this.DoneField;
            }
            set {
                if ((this.DoneField.Equals(value) != true)) {
                    this.DoneField = value;
                    this.RaisePropertyChanged("Done");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Task {
            get {
                return this.TaskField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskField, value) != true)) {
                    this.TaskField = value;
                    this.RaisePropertyChanged("Task");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoService.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/RememberTodo", ReplyAction="http://tempuri.org/ITodoService/RememberTodoResponse")]
        int RememberTodo(string todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/RememberTodo", ReplyAction="http://tempuri.org/ITodoService/RememberTodoResponse")]
        System.Threading.Tasks.Task<int> RememberTodoAsync(string todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/MarkDone", ReplyAction="http://tempuri.org/ITodoService/MarkDoneResponse")]
        bool MarkDone(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/MarkDone", ReplyAction="http://tempuri.org/ITodoService/MarkDoneResponse")]
        System.Threading.Tasks.Task<bool> MarkDoneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTodos", ReplyAction="http://tempuri.org/ITodoService/GetTodosResponse")]
        Assistant.TodoService.Todo[] GetTodos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTodos", ReplyAction="http://tempuri.org/ITodoService/GetTodosResponse")]
        System.Threading.Tasks.Task<Assistant.TodoService.Todo[]> GetTodosAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : Assistant.TodoService.ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<Assistant.TodoService.ITodoService>, Assistant.TodoService.ITodoService {
        
        public TodoServiceClient() {
        }
        
        public TodoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int RememberTodo(string todo) {
            return base.Channel.RememberTodo(todo);
        }
        
        public System.Threading.Tasks.Task<int> RememberTodoAsync(string todo) {
            return base.Channel.RememberTodoAsync(todo);
        }
        
        public bool MarkDone(int id) {
            return base.Channel.MarkDone(id);
        }
        
        public System.Threading.Tasks.Task<bool> MarkDoneAsync(int id) {
            return base.Channel.MarkDoneAsync(id);
        }
        
        public Assistant.TodoService.Todo[] GetTodos() {
            return base.Channel.GetTodos();
        }
        
        public System.Threading.Tasks.Task<Assistant.TodoService.Todo[]> GetTodosAsync() {
            return base.Channel.GetTodosAsync();
        }
    }
}
